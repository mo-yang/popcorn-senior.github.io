<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>itmoyang</title>
  
  <subtitle>墨杨</subtitle>
  <link href="https://popcorn-senior.github.io/atom.xml" rel="self"/>
  
  <link href="https://popcorn-senior.github.io/"/>
  <updated>2021-04-06T08:48:13.906Z</updated>
  <id>https://popcorn-senior.github.io/</id>
  
  <author>
    <name>墨杨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://popcorn-senior.github.io/posts/4a17b156/"/>
    <id>https://popcorn-senior.github.io/posts/4a17b156/</id>
    <published>2021-04-06T08:50:43.519Z</published>
    <updated>2021-04-06T08:48:13.906Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><p>Canvas是HTML5中非常重要的一个更新亮点，画布，替代Flash的！制作动画、制作游戏。渲染效率非常的高，浏览器不需要安装任何的插件就可以渲染这个动画。而Flash需要安装Flash Player这个插件才行。</p><h4 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h4><p>canvas是一个标签，有一个默认的宽度，不需要了解。此时注意，如果我们要设置宽度、高度，必须设置在HTML标签上面，而不能设置在CSS上。</p><p>我们必须使用JavaScript来控制Canvas渲染各种东西：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">canvas</span>{</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span></span><br><span class="line">你的浏览器不支持canvas,请升级浏览器</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//使用DOM方法得到画布</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mycanvas = <span class="built_in">document</span>.querySelector(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//使用画布的上下文,获取绘画功能对象,就像拿到一直画笔,这支画笔只在当前画笔有效</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx = mycanvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//画各种东西，用ctx打点调用方法，而不是mycanvas</span></span></span><br><span class="line">    ctx.fillRect(100,100,300,40);</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意点:</p><pre><code>canvas本身布具有绘画功能, 只是一个画布, 但是H5提供给js的API具有绘画功能IE9一下不兼容</code></pre><h4 id="2-涉及的API"><a href="#2-涉及的API" class="headerlink" title="2. 涉及的API"></a>2. 涉及的API</h4><h5 id="2-1-getContext"><a href="#2-1-getContext" class="headerlink" title="2.1 getContext()"></a>2.1 getContext()</h5><p>get表示得到，context是上下文的意思。</p><p>canvas起初是空白的。为了展示，首先脚本需要找到渲染上下文，然后在它的上面绘制。<code>&lt;canvas&gt;</code> 元素有一个做 getContext() 的方法，这个方法是用来获得渲染上下文和它的绘画功能。getContext()只有一个参数，上下文的格式。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先获取canvas 标签的dom对象</span></span><br><span class="line"><span class="keyword">var</span> mycanvas = <span class="built_in">document</span>.querySelector(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上下文对象() 参数是2d绘图</span></span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br></pre></td></tr></tbody></table></figure><p>ctx对象，非常重要所有的绘制都是ctx的方法。canvas就是画布,功能就是生产画笔,</p><p>剩下所有的绘制都是有这支画笔ctx对象的属性来操作</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也就是说所有的绘制API都是ctx的事情，而不是canvas对象</span></span><br><span class="line">ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI * <span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="2-2-绘制圆形-arc"><a href="#2-2-绘制圆形-arc" class="headerlink" title="2.2  绘制圆形 arc()"></a>2.2  绘制圆形 arc()</h5><p>绘制圆形 arc(x,y,r,start, end, bol)</p><p>bol,是布尔值</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI * <span class="number">2</span>,<span class="literal">true</span>);</span><br></pre></td></tr></tbody></table></figure><h5 id="2-3-绘制矩形-rect"><a href="#2-3-绘制矩形-rect" class="headerlink" title="2.3  绘制矩形 rect()"></a>2.3  绘制矩形 rect()</h5><p>绘制矩形 rect(x,y,w,h)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.rect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></tbody></table></figure><h5 id="2-4-stroke-笔触"><a href="#2-4-stroke-笔触" class="headerlink" title="2.4  stroke()笔触"></a>2.4  stroke()笔触</h5><p>绘制线条</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><h5 id="2-5-fill-填充"><a href="#2-5-fill-填充" class="headerlink" title="2.5 fill() 填充"></a>2.5 fill() 填充</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.fill()</span><br></pre></td></tr></tbody></table></figure><h5 id="2-6-可以合在一起写"><a href="#2-6-可以合在一起写" class="headerlink" title="2.6  可以合在一起写"></a>2.6  可以合在一起写</h5><ol><li><p>strokeRect(x,y,w,h)</p></li><li><p>fillRect(x,y,w,h)</p><p>参数:</p><pre><code>x,y 为起点的x,y坐标w,h 为要绘制矩形的宽高</code></pre></li></ol><p>注意没有strokeArc  和 fillArc 的写法</p><h5 id="2-7-清除-clearRect"><a href="#2-7-清除-clearRect" class="headerlink" title="2.7 清除 clearRect()"></a>2.7 清除 clearRect()</h5><p>清除clearRect(x,y,w,h)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.clearRect(<span class="number">250</span>, <span class="number">250</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br></pre></td></tr></tbody></table></figure><p>清除在绘制有先后属性之分</p><h3 id="二-笔触和填充"><a href="#二-笔触和填充" class="headerlink" title="二. 笔触和填充"></a>二. 笔触和填充</h3><p>Canvas中能够产生颜色的是两个东西，一个叫做笔触（也叫做描边），一个叫做填充。</p><h4 id="1-笔触（描边）-strokeRect-x-y-w-h"><a href="#1-笔触（描边）-strokeRect-x-y-w-h" class="headerlink" title="1. 笔触（描边） strokeRect(x,y,w,h)"></a>1. 笔触（描边） strokeRect(x,y,w,h)</h4><p>参数,x,y 左上角起点坐标,w,h为绘制矩形的宽高</p><h5 id="1-1-笔触的使用"><a href="#1-1-笔触的使用" class="headerlink" title="1.1 笔触的使用:"></a>1.1 笔触的使用:</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//笔触</span></span><br><span class="line">ctx.strokeRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">40</span>);</span><br></pre></td></tr></tbody></table></figure><p>你会发现只有描边没有填充色</p><p>而我们刚学的  fillRect()  API绘制的矩形是有填充色的</p><h5 id="1-2-设置笔触的颜色"><a href="#1-2-设置笔触的颜色" class="headerlink" title="1.2  设置笔触的颜色"></a>1.2  设置笔触的颜色</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置笔触颜色</span></span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line"><span class="comment">// ctx.strokeStyle = 'hsl(250,50%,50%)'</span></span><br><span class="line"><span class="comment">// 绘制笔触矩形</span></span><br><span class="line">ctx.strokeRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">50</span>);</span><br></pre></td></tr></tbody></table></figure><p>此时你就会发现你绘制的是一个没有填充色，只有红色边框的矩形</p><h5 id="1-3-绘制笔触的宽度"><a href="#1-3-绘制笔触的宽度" class="headerlink" title="1.3 绘制笔触的宽度"></a>1.3 绘制笔触的宽度</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.lineWidth = <span class="number">20</span>;   <span class="comment">// 设置笔触的宽为20</span></span><br></pre></td></tr></tbody></table></figure><h5 id="1-4-笔触绘制线段"><a href="#1-4-笔触绘制线段" class="headerlink" title="1.4 笔触绘制线段"></a>1.4 笔触绘制线段</h5><p>划线之前你的先告诉浏览器怎么画</p><p>moveTo() 绘制开始位置  lineTo() 画笔移动的下一个位置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  <span class="comment">//将画笔移动到一个位置(先移动到开始点的位置)</span></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);  <span class="comment">//用画笔画，此时是抽象的一个线，没有显示在画布上(下一个点的位置)</span></span><br><span class="line">ctx.stroke();<span class="comment">//划线(告诉浏览器,我说完了,你画吧)</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以多次使用lineTo：</p><p>告诉浏览器下一个点的位置,来绘制相邻点之间的线段</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  <span class="comment">// 将画笔移动到一个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);  <span class="comment">// 准备绘制从开始点到这个点的线，</span></span><br><span class="line"></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);<span class="comment">// 准备绘制从上一个点到这个点的线，</span></span><br><span class="line">ctx.lineTo(<span class="number">430</span>,<span class="number">180</span>);<span class="comment">// 准备绘制从上一个点到这个点的线，</span></span><br><span class="line"></span><br><span class="line">ctx.stroke();        <span class="comment">// 正式开始划线 </span></span><br></pre></td></tr></tbody></table></figure><h5 id="1-5-闭合路径"><a href="#1-5-闭合路径" class="headerlink" title="1.5 闭合路径"></a>1.5 闭合路径</h5><p>而且我们还可以使用closePath() ,来闭合路径</p><p>就是浏览器会自动的在开始点moveTo的点和最后一个lineTo的结束点之间绘制一条线</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();  <span class="comment">// 开始准备画线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  <span class="comment">// 将画笔移动到一个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);  <span class="comment">// 准备绘制从开始点到这个点的线，</span></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);<span class="comment">// 准备绘制从上一个点到这个点的线，</span></span><br><span class="line">ctx.lineTo(<span class="number">430</span>,<span class="number">180</span>);<span class="comment">// 准备绘制从上一个点到这个点的线，</span></span><br><span class="line"></span><br><span class="line">ctx.closePath();        <span class="comment">// 闭合路径</span></span><br><span class="line"></span><br><span class="line">ctx.stroke();        <span class="comment">// 正式开始划线 </span></span><br></pre></td></tr></tbody></table></figure><h5 id="1-6-绘制新的线条开始"><a href="#1-6-绘制新的线条开始" class="headerlink" title="1.6 绘制新的线条开始"></a>1.6 绘制新的线条开始</h5><p>可以使用beginPath() 表示开始一个新的路径</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath()</span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.stroke()</span><br><span class="line"></span><br><span class="line">ctx.beginPath()</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">430</span>, <span class="number">180</span>);</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><p>可以使用lineWidth属性设置线的宽度</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();  </span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  </span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);  </span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">430</span>,<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;<span class="comment">// 绘制描边的颜色</span></span><br><span class="line">ctx.closePath();        <span class="comment">// 闭合路径</span></span><br><span class="line">ctx.lineWidth = <span class="string">'10'</span>;   <span class="comment">// 绘制线的宽度</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.filStyle = <span class="string">'skyblue'</span>;<span class="comment">// 绘制填充颜色</span></span><br><span class="line">ctx.fill();<span class="comment">// 绘制填充色  </span></span><br></pre></td></tr></tbody></table></figure><h5 id="1-7-绘制线条的转角"><a href="#1-7-绘制线条的转角" class="headerlink" title="1.7 绘制线条的转角"></a>1.7 绘制线条的转角</h5><p>lineJoin : 边界连接点样式<br>        miter(默认值),round(圆角),bevel(斜角)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">430</span>, <span class="number">180</span>);</span><br><span class="line">ctx.closePath()</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.lineJoin = <span class="string">'round'</span></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><h5 id="1-8-端点样式"><a href="#1-8-端点样式" class="headerlink" title="1.8 端点样式"></a>1.8 端点样式</h5><p>lineCap: 端点样式<br>        butt(默认值),round(圆角),square(高度多出线宽一半)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">50</span>;</span><br><span class="line">ctx.lineCap = <span class="string">'round'</span></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><h4 id="2-填充-fill"><a href="#2-填充-fill" class="headerlink" title="2. 填充  fill()"></a>2. 填充  fill()</h4><p>还可以是用fill()给闭合路径后的闭合区域填充颜色</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();  <span class="comment">// 开始准备画线</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  <span class="comment">// 将画笔移动到一个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);  <span class="comment">// 准备绘制从开始点到这个点的线，</span></span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);<span class="comment">// 准备绘制从上一个点到这个点的线，</span></span><br><span class="line">ctx.lineTo(<span class="number">430</span>,<span class="number">180</span>);<span class="comment">// 准备绘制从上一个点到这个点的线，</span></span><br><span class="line">ctx.closePath();        <span class="comment">// 闭合路径</span></span><br><span class="line">ctx.stroke();        <span class="comment">// 正式开始划线 </span></span><br><span class="line"></span><br><span class="line">ctx.fill();<span class="comment">// 绘制填充色</span></span><br></pre></td></tr></tbody></table></figure><h5 id="2-1-绘制填充颜色-fillStyle"><a href="#2-1-绘制填充颜色-fillStyle" class="headerlink" title="2.1  绘制填充颜色 fillStyle"></a>2.1  绘制填充颜色 fillStyle</h5><p>strokeStyle 属性修改描边颜色</p><p>fillStyle   属性修改填充颜色</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();  </span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  </span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);  </span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">430</span>,<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;<span class="comment">// 绘制描边的颜色</span></span><br><span class="line">ctx.closePath();        <span class="comment">// 闭合路径</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.filStyle = <span class="string">'skyblue'</span>;<span class="comment">// 绘制填充颜色</span></span><br><span class="line">ctx.fill();<span class="comment">// 绘制填充色  </span></span><br></pre></td></tr></tbody></table></figure><h3 id="三-弧与圆形"><a href="#三-弧与圆形" class="headerlink" title="三.弧与圆形"></a>三.弧与圆形</h3><h4 id="1-绘制弧度及圆形的公式"><a href="#1-绘制弧度及圆形的公式" class="headerlink" title="1. 绘制弧度及圆形的公式"></a>1. 绘制弧度及圆形的公式</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)</span><br></pre></td></tr></tbody></table></figure><h5 id="1-1-参数"><a href="#1-1-参数" class="headerlink" title="1.1 参数"></a>1.1 参数</h5><ol><li> x,y为圆心的坐标</li><li> radius 为圆形的半径</li><li> startAngle 为弧度的起始位置,0是正x轴的</li><li> endAngle  为弧度的终点位置,</li><li> anticlockwise   布尔值,true为逆时针绘制,false为顺时针绘制</li></ol><h5 id="1-2-注意"><a href="#1-2-注意" class="headerlink" title="1.2 注意"></a>1.2 注意</h5><blockquote><p>canvas中角度是弧度制</p></blockquote><p>弧和圆形也是笔触(描边),所以也需要以beginPath()开始</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = mycanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">150</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">ctx.arc(<span class="number">150</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">false</span>);</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">150</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">ctx.strokeStyle= <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">2</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></tbody></table></figure><h3 id="四-绘制曲线"><a href="#四-绘制曲线" class="headerlink" title="四. 绘制曲线"></a>四. 绘制曲线</h3><h4 id="1-绘制弧度曲线"><a href="#1-绘制弧度曲线" class="headerlink" title="1. 绘制弧度曲线"></a>1. 绘制弧度曲线</h4><p>arcTo(x1,y1,x2,y2,r)<br>        x1,y1 坐标一  x2,y2坐标二   r圆弧半斤</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">300</span>)</span><br><span class="line">ctx.arcTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><h4 id="2-绘制贝塞尔曲线"><a href="#2-绘制贝塞尔曲线" class="headerlink" title="2.  绘制贝塞尔曲线"></a>2.  绘制贝塞尔曲线</h4><h5 id="2-1-绘制公式"><a href="#2-1-绘制公式" class="headerlink" title="2.1 绘制公式"></a>2.1 绘制公式</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.quadraticCurveTo(cp1x,cp1y,x,y)</span><br></pre></td></tr></tbody></table></figure><h5 id="2-2-参数"><a href="#2-2-参数" class="headerlink" title="2.2 参数"></a>2.2 参数</h5><ol><li>cp1x, cp1y 为贝塞尔曲线的控制点</li><li>x,y   为绘制曲线的终点</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath()</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.quadraticCurveTo(<span class="number">200</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></tbody></table></figure><h4 id="3-绘制二次贝塞尔曲线"><a href="#3-绘制二次贝塞尔曲线" class="headerlink" title="3.  绘制二次贝塞尔曲线"></a>3.  绘制二次贝塞尔曲线</h4><h5 id="3-1-绘制公式"><a href="#3-1-绘制公式" class="headerlink" title="3.1 绘制公式"></a>3.1 绘制公式</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y)</span><br></pre></td></tr></tbody></table></figure><h5 id="3-2-参数"><a href="#3-2-参数" class="headerlink" title="3.2 参数"></a>3.2 参数</h5><ol><li>cp1x, cp1y 为贝塞尔曲线的第一个控制点</li><li>cp2x, cp3y 为贝塞尔曲线的第二个控制点</li><li>x,y   为绘制曲线的终点</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath()</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.bezierCurveTo(<span class="number">200</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></tbody></table></figure><h3 id="五-canvas变换"><a href="#五-canvas变换" class="headerlink" title="五. canvas变换"></a>五. canvas变换</h3><h4 id="1-translate-x-y"><a href="#1-translate-x-y" class="headerlink" title="1.  translate(x,y)"></a>1.  translate(x,y)</h4><p>坐标基准点偏移 : 从起始点为基准，移动到当前位置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.translate(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><h4 id="2-rotate-弧度"><a href="#2-rotate-弧度" class="headerlink" title="2.rotate(弧度):"></a>2.rotate(弧度):</h4><p>旋转  弧度公式 ：角度*PI/180</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">30</span>)</span><br><span class="line">ctx.rect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><p>​    </p><h4 id="3-scale-wb-hb"><a href="#3-scale-wb-hb" class="headerlink" title="3. scale(wb,hb)"></a>3. scale(wb,hb)</h4><p>缩放比例(缩放canvas绘制的图片)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.scale(<span class="number">1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">ctx.rect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></tbody></table></figure><p>这里不单单将宽高放到,圆心坐标也会乘以倍数</p><h3 id="六-保存与恢复路径"><a href="#六-保存与恢复路径" class="headerlink" title="六. 保存与恢复路径"></a>六. 保存与恢复路径</h3><h4 id="1-保存路径-save"><a href="#1-保存路径-save" class="headerlink" title="1. 保存路径 save()"></a>1. 保存路径 save()</h4><h4 id="2-恢复路径-restore"><a href="#2-恢复路径-restore" class="headerlink" title="2.恢复路径 restore()"></a>2.恢复路径 restore()</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.save()</span><br><span class="line">ctx.scale(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">ctx.fillStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">ctx.restore()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.beginPath()</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><p>会封闭一个独立路径 不会对外边的区域产生影响</p><h3 id="七-绘制图片"><a href="#七-绘制图片" class="headerlink" title="七 绘制图片"></a>七 绘制图片</h3><h4 id="1-绘制图片"><a href="#1-绘制图片" class="headerlink" title="1. 绘制图片"></a>1. 绘制图片</h4><h5 id="1-1-创建图片对象-获取图片"><a href="#1-1-创建图片对象-获取图片" class="headerlink" title="1.1  创建图片对象,获取图片"></a>1.1  创建图片对象,获取图片</h5><p>图片预加载，获取图片文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'../1.jpg'</span></span><br></pre></td></tr></tbody></table></figure><h5 id="1-2-onload事件-当图片加载完成执行绘制"><a href="#1-2-onload事件-当图片加载完成执行绘制" class="headerlink" title="1.2 onload事件,当图片加载完成执行绘制"></a>1.2 onload事件,当图片加载完成执行绘制</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br></pre></td></tr></tbody></table></figure><h5 id="1-3-图片加载完成后将图片绘制在画布上"><a href="#1-3-图片加载完成后将图片绘制在画布上" class="headerlink" title="1.3 图片加载完成后将图片绘制在画布上"></a>1.3 图片加载完成后将图片绘制在画布上</h5><p>ctx.drawImage(image, dx, dy, dWidth, dHeight);</p><p>绘制图片(图片对象,画布坐标x,画布坐标y,绘制显示图片宽度,绘制显示图片高度)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'../1.jpg'</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    ctx.drawImage(<span class="built_in">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">300</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="1-4-切图"><a href="#1-4-切图" class="headerlink" title="1.4 切图"></a>1.4 切图</h5><p>ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</p><p>参数:</p><ol><li><p>image 绘制到上下文的元素</p></li><li><p>sx   可选 </p><p>需要绘制到目标上下文中的，<code>image</code>的矩形（裁剪）选择框的左上角 X 轴坐标。</p></li><li><p>sy  可选</p><p>需要绘制到目标上下文中的，<code>image</code>的矩形（裁剪）选择框的左上角 Y 轴坐标。</p></li><li><p>sWidth  可选</p><p>需要绘制到目标上下文中的，<code>image</code>的矩形（裁剪）选择框的宽度。</p></li><li><p>sHeight 可选</p><p>需要绘制到目标上下文中的，<code>image</code>的矩形（裁剪）选择框的高度。</p></li><li><p>dx  </p><p><code>image</code>的左上角在目标canvas上 X 轴坐标。</p></li><li><p> dy</p></li></ol><p>   <code>image</code>的左上角在目标canvas上 Y 轴坐标。</p><ol start="8"><li> dWidth  可选</li></ol><p>   <code>image</code>在目标canvas上绘制的宽度。 </p><ol start="9"><li><p>dHeight  可选</p><p><code>image</code>在目标canvas上绘制的高度。 允许对绘制的<code>image</code>进行缩放。</p></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'../1.jpg'</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    ctx.drawImage(<span class="built_in">this</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-填充背景"><a href="#2-填充背景" class="headerlink" title="2. 填充背景"></a>2. 填充背景</h4><h5 id="2-1-createPattern-img-平铺方式"><a href="#2-1-createPattern-img-平铺方式" class="headerlink" title="2.1 createPattern(img,平铺方式)"></a>2.1 createPattern(img,平铺方式)</h5><p>参数: 平铺方式:repeat,repeat-x,repeat-y,no-repeat</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'../1.jpg'</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> bg = ctx.createPattern(img, <span class="string">'no-repeat'</span>);</span><br><span class="line">    ctx.fillStyle = bg;</span><br><span class="line">    ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3-颜色渐变"><a href="#3-颜色渐变" class="headerlink" title="3. 颜色渐变"></a>3. 颜色渐变</h4><h5 id="3-1-线性渐变-createLinearGradient-x1-y1-x2-y2"><a href="#3-1-线性渐变-createLinearGradient-x1-y1-x2-y2" class="headerlink" title="3.1 线性渐变:createLinearGradient(x1,y1,x2,y2)"></a>3.1 线性渐变:createLinearGradient(x1,y1,x2,y2)</h5><pre><code>x1,y1起始坐标点x2,y2结束坐标点</code></pre><h5 id="3-2-径向渐变-createRadialGradient-x1-y1-r1-x2-y2-r2"><a href="#3-2-径向渐变-createRadialGradient-x1-y1-r1-x2-y2-r2" class="headerlink" title="3.2 径向渐变:createRadialGradient(x1,y1,r1,x2,y2,r2)"></a>3.2 径向渐变:createRadialGradient(x1,y1,r1,x2,y2,r2)</h5><pre><code>x1,y1,r1内圆坐标及半径x2,y2,r2外圆坐标及半径</code></pre><h5 id="3-3-addColorStop-位置-颜色"><a href="#3-3-addColorStop-位置-颜色" class="headerlink" title="3.3 addColorStop(位置,颜色)"></a>3.3 addColorStop(位置,颜色)</h5><pre><code>位置:渐变点  0-1之间 可多个</code></pre><p>例子,</p><p>线性渐变</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">color.addColorStop(<span class="number">0</span>, <span class="string">'pink'</span>);</span><br><span class="line">color.addColorStop(<span class="number">0.5</span>, <span class="string">'yellow'</span>)</span><br><span class="line">color.addColorStop(<span class="number">1</span>, <span class="string">'deeppink'</span>)</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = color;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>)</span><br></pre></td></tr></tbody></table></figure><p>径向渐变</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = ctx.createRadialGradient(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">color.addColorStop(<span class="number">0</span>, <span class="string">'pink'</span>);</span><br><span class="line">color.addColorStop(<span class="number">0.5</span>, <span class="string">'yellow'</span>)</span><br><span class="line">color.addColorStop(<span class="number">1</span>, <span class="string">'deeppink'</span>)</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = color;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="八-绘制文本"><a href="#八-绘制文本" class="headerlink" title="八.绘制文本"></a>八.绘制文本</h3><h4 id="1-绘制文本"><a href="#1-绘制文本" class="headerlink" title="1. 绘制文本"></a>1. 绘制文本</h4><ol><li>strokeText(文本,x,y);  绘制空心文本</li><li>fillText(文本,x,y); 绘制实心文本</li><li>font = “font-size  font-family” 注:尺寸 字体缺一不可</li><li>textAlign = “”;文本左右对齐方式 <pre><code>start center end  left right    </code></pre></li><li>textBaseline文本上下对齐方式 <pre><code>alphabetic    默认。文本基线是普通的字母基线。   top    文本基线是 em 方框的顶端。。   hanging    文本基线是悬挂基线。   middle    文本基线是 em 方框的正中。   ideographic    文本基线是表意基线。   bottom    文本基线是 em 方框的底端。</code></pre></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wuwei'</span></span><br><span class="line">ctx.font = <span class="string">'50px 宋体'</span></span><br><span class="line">ctx.textAlign = <span class="string">'center'</span></span><br><span class="line">ctx.textBaseline = <span class="string">'top'</span></span><br><span class="line">ctx.strokeText(str, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">ctx.fillText(str, <span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="2-绘制阴影"><a href="#2-绘制阴影" class="headerlink" title="2. 绘制阴影"></a>2. 绘制阴影</h4><ol><li>shadowOffsetX,shadowOffsetY    x轴、y轴偏移</li><li>shadowBlur    阴影模糊度</li><li>shadowColor  阴影颜色<pre><code>默认颜色:rgba(0,0,0,0)</code></pre></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.shadowOffsetX = <span class="string">'10'</span></span><br><span class="line">ctx.shadowOffsetY = <span class="string">'10'</span></span><br><span class="line">ctx.shadowBlur = <span class="string">'3'</span></span><br><span class="line">ctx.shadowColor = <span class="string">'red'</span></span><br></pre></td></tr></tbody></table></figure><p>案例:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">canvas</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid skyblue;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.box</span>{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">input</span>{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">'colorList'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'color'</span>&gt;</span>随机颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">'2px'</span> <span class="attr">id</span>=<span class="string">'storke'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'add'</span>&gt;</span>笔触增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'reduce'</span>&gt;</span>笔触减小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"clear"</span>&gt;</span>清屏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'canvas'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strokeColor = <span class="string">'#000000'</span>;</span><br><span class="line"><span class="keyword">var</span> lineWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">colorList.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    strokeColor = colorList.value;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">color.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    strokeColor = <span class="string">'#'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">    colorList.value = strokeColor;</span><br><span class="line">}</span><br><span class="line">add.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (lineWidth &gt;= <span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">    lineWidth += <span class="number">2</span>;</span><br><span class="line">    storke.value = lineWidth + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">reduce.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (lineWidth &lt;= <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    lineWidth -= <span class="number">2</span>;</span><br><span class="line">    storke.value = lineWidth + <span class="string">'px'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>{</span><br><span class="line">    ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> This = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> x = ev.clientX - <span class="built_in">this</span>.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> y = ev.clientY - <span class="built_in">this</span>.offsetTop;</span><br><span class="line">    ctx.strokeStyle = strokeColor;</span><br><span class="line">    ctx.lineWidth = lineWidth;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(x, y);</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>{</span><br><span class="line">        ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> x = ev.clientX - This.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> y = ev.clientY - This.offsetTop;</span><br><span class="line">        ctx.lineTo(x, y);</span><br><span class="line">        ctx.stroke();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">this</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">clear.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="九-API使用总结"><a href="#九-API使用总结" class="headerlink" title="九.API使用总结"></a>九.API使用总结</h3><h4 id="1-canvas标签"><a href="#1-canvas标签" class="headerlink" title="1. canvas标签"></a>1. canvas标签</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    您的浏览器不支持canvas，请更换浏览器！</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><pre><code>默认宽度300px，默认高度 150px</code></pre><h4 id="2-canvas绘图环境设置"><a href="#2-canvas绘图环境设置" class="headerlink" title="2. canvas绘图环境设置"></a>2. canvas绘图环境设置</h4><pre><code>getContext("2d"); 目前支持2d绘图环境</code></pre><h4 id="3-绘图路劲"><a href="#3-绘图路劲" class="headerlink" title="3.绘图路劲:"></a>3.绘图路劲:</h4><ol><li>beginPath() :开始路劲</li><li>closePath():闭合路劲</li><li>moveTo(x,y):将触笔移动到x,y点</li><li>lineTo(x,y):绘制到x,y点</li><li>stroke(): 触笔方法 画线  默认为黑色</li><li>fill():填充方法 </li><li>rect(x,y,w,h):矩形路径</li><li>save():保存路径</li><li>restore():恢复路径</li></ol><h4 id="4-绘制矩形："><a href="#4-绘制矩形：" class="headerlink" title="4. 绘制矩形："></a>4. 绘制矩形：</h4><ol><li>fillRect(x,y,w,h)   填充实心矩形</li><li>strokeRect(x,y,w,h)  绘制空心矩形</li><li>clearRect(x,y,w,h)  清除矩形选区</li></ol><h4 id="5-设置绘图样式："><a href="#5-设置绘图样式：" class="headerlink" title="5. 设置绘图样式："></a>5. 设置绘图样式：</h4><ol><li>fillStyle: 填充颜色</li><li>strokeStyle: 触笔颜色</li><li>lineWidth: 触笔宽度(线宽)</li></ol><h4 id="6-图形边界样式："><a href="#6-图形边界样式：" class="headerlink" title="6. 图形边界样式："></a>6. 图形边界样式：</h4><ol><li>lineJoin : 边界连接点样式<pre><code>miter(默认值),round(圆角),bevel(斜角)</code></pre></li><li>lineCap: 端点样式<pre><code>butt(默认值),round(圆角),square(高度多出线宽一半)</code></pre></li></ol><h4 id="7-绘制圆形："><a href="#7-绘制圆形：" class="headerlink" title="7. 绘制圆形："></a>7. 绘制圆形：</h4><ol><li>arc(x,y,r,0,360,false)<br>x,y  圆心坐标位置<br> r 圆半径<br> 0,360 从0度到360度 绘制一个圆形(用弧度公式)<br> true/false  逆时针/顺时针绘图</li></ol><h4 id="8-绘制曲线"><a href="#8-绘制曲线" class="headerlink" title="8. 绘制曲线"></a>8. 绘制曲线</h4><ol><li>arcTo(x1,y1,x2,y2,r)<pre><code>x1,y1 坐标一  x2,y2坐标二   r圆弧半斤</code></pre></li><li>quadraticCurveTo(dx,dy,x1,y1)<pre><code>贝塞尔曲线:dx,dy控制点  x1,y1结束坐标</code></pre></li><li>bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)<pre><code>贝塞尔曲线:dx1,dy1 控制点一 dx2,dy2控制点二        x1,y1结束坐标</code></pre></li></ol><h4 id="9-canvas变换"><a href="#9-canvas变换" class="headerlink" title="9. canvas变换"></a>9. canvas变换</h4><ol><li>translate(x,y)<pre><code>    坐标基准点偏移 : 从起始点为基准，移动到当前位置</code></pre></li><li>rotate(弧度): 旋转  弧度公式 ：角度*PI/180</li><li>scale(wb,hb)缩放比例(缩放canvas绘制的图片)</li></ol><h4 id="10-绘制图片"><a href="#10-绘制图片" class="headerlink" title="10. 绘制图片"></a>10. 绘制图片</h4><ol><li>图片预加载，获取图片文件</li><li>onload事件,监听图片是否加载完毕,如果加载完毕执行第三步</li><li>drawImage(img,x,y,w,h);绘制图片(图片,坐标x,坐标y,宽度,高度)</li></ol><h4 id="11-设置背景"><a href="#11-设置背景" class="headerlink" title="11.设置背景"></a>11.设置背景</h4><ol><li>createPattern(img,平铺方式)<pre><code>平铺方式:repeat,repeat-x,repeat-y,no-repeat</code></pre></li></ol><h4 id="12-颜色渐变"><a href="#12-颜色渐变" class="headerlink" title="12. 颜色渐变"></a>12. 颜色渐变</h4><ol><li>线性渐变:createLinearGradient(x1,y1,x2,y2)<pre><code>x1,y1起始坐标点   x2,y2结束坐标点</code></pre></li><li>径向渐变:createRadialGradient(x1,y1,r1,x2,y2,r2)<pre><code>x1,y1,r1内圆坐标及半径   x2,y2,r2外圆坐标及半径</code></pre></li><li>addColorStop(位置,颜色)<pre><code>位置:渐变点  0-1之间 可多个</code></pre></li></ol><h4 id="13-绘制文本"><a href="#13-绘制文本" class="headerlink" title="13. 绘制文本"></a>13. 绘制文本</h4><ol><li>strokeText(文本,x,y);  绘制空心文本</li><li>fillText(文本,x,y); 绘制实心文本</li><li>font = “font-size  font-family” 注:尺寸 字体缺一不可</li><li>textAlign = “”;文本左右对齐方式 <pre><code>start center end  left right</code></pre></li><li>textBaseline文本上下对齐方式 <pre><code>alphabetic    默认。文本基线是普通的字母基线。   top    文本基线是 em 方框的顶端。。   hanging    文本基线是悬挂基线。   middle    文本基线是 em 方框的正中。   ideographic    文本基线是表意基线。   bottom    文本基线是 em 方框的底端。</code></pre></li></ol><h4 id="14-阴影"><a href="#14-阴影" class="headerlink" title="14. 阴影"></a>14. 阴影</h4><ol><li>shadowOffsetX,shadowOffsetY    x轴、y轴偏移</li><li>shadowBlur    阴影模糊度</li><li>shadowColor  阴影颜色</li><li>默认颜色:rgba(0,0,0,0)<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>function</title>
    <link href="https://popcorn-senior.github.io/posts/caae163d/"/>
    <id>https://popcorn-senior.github.io/posts/caae163d/</id>
    <published>2021-04-06T07:41:08.000Z</published>
    <updated>2021-04-06T08:48:13.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第八章-函数的深扒"><a href="#第八章-函数的深扒" class="headerlink" title="第八章 函数的深扒"></a>第八章 函数的深扒</h1><h2 id="1-arguments"><a href="#1-arguments" class="headerlink" title="1. arguments"></a>1. arguments</h2><p>arguments是再函数作用域内存在的一个类数组对象，存储函数的参数等属性。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; <span class="built_in">arguments</span>.length+<span class="number">2</span>;i++){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"哈哈哈"</span>,{},[<span class="number">1</span>,<span class="number">2</span>]);<span class="comment">//</span></span><br></pre></td></tr></tbody></table></figure><p>arguments参数只有在函数作用域里面才生效，它是一个对象，但是和数组一样可以通过[0]或者[1]的方式依顺序访问函数的参数，并且具有一个length属性，访问的是函数的参数的个数。</p><p>arguments里面还有属性callee，指的是函数本身，可以在函数内部调用函数自己(不推荐使用)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee(num-<span class="number">1</span>)+num</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">}</span><br><span class="line">sum(<span class="number">100</span>);<span class="comment">//5050</span></span><br></pre></td></tr></tbody></table></figure><p>这里不知道函数名字(匿名函数)，但是还是依旧可以调用自身。</p><h2 id="2-剩余参数rest"><a href="#2-剩余参数rest" class="headerlink" title="2. 剩余参数rest"></a>2. 剩余参数rest</h2><p>现在我有一个需求：我需要一个函数，传入不定长参数，第一个参数是名字，第二个以后都是我的收益，函数返回名字加收益的总和</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">name,...rest</span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;rest.length;i++){</span><br><span class="line">        sum+=rest[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> name+sum</span><br><span class="line">}</span><br><span class="line">add(<span class="string">"银时"</span>,<span class="number">12</span>,<span class="number">321</span>,<span class="number">3</span>,<span class="number">123</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">23</span>);<span class="comment">//"银时525"</span></span><br></pre></td></tr></tbody></table></figure><p>将多余的实参传入rest数组中，如果没有多余的则rest数组为空</p><p>默认参数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name=<span class="string">"Gin"</span>,sex=<span class="string">"boy"</span>,age=<span class="number">18</span></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> o = {</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"age"</span>: age,</span><br><span class="line">        <span class="string">"sex"</span>: sex,</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> myperson = Person(<span class="string">"银时"</span>)；<span class="comment">//{name:"银时",age:18,sex:"boy"}</span></span><br><span class="line"><span class="keyword">let</span> newperson = Person();<span class="comment">//{name:"Gin",age:18,sex:"boy"}</span></span><br></pre></td></tr></tbody></table></figure><p>用于应对不定参数或者参数残缺的接口。</p><h2 id="3-箭头函数与function的区别"><a href="#3-箭头函数与function的区别" class="headerlink" title="3. 箭头函数与function的区别"></a>3. 箭头函数与function的区别</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{<span class="comment">//普通的函数声明</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>);<span class="comment">//箭头函数</span></span><br></pre></td></tr></tbody></table></figure><p>区别： </p><ol><li>一个是function函数申明，一个是箭头函数函数表达式</li><li>function里面有arguments，箭头函数没有arguments，用(…rest)代替</li><li>箭头函数没有构造函数，this指向是外部上下文的this(无法改变)。</li></ol><h2 id="4-this是什么，this在function函数里面的指向"><a href="#4-this是什么，this在function函数里面的指向" class="headerlink" title="4. this是什么，this在function函数里面的指向"></a>4. this是什么，this在function函数里面的指向</h2><p>this是”这个”的意思，this指向调用函数的主体对象。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">//window,浏览器对象</span></span><br><span class="line"><span class="comment">//这意味着他和window.console.log等价</span></span><br><span class="line"><span class="built_in">window</span>.console.log === <span class="built_in">console</span>.log;<span class="comment">//true,浏览器对象调用console.log</span></span><br></pre></td></tr></tbody></table></figure><p>在全局中this指向window</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window name"</span>;</span><br><span class="line"><span class="comment">//全局的name是当window存在都不会消失，跳转也不会</span></span><br><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"this object"</span>,</span><br><span class="line">    <span class="string">"getThis"</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>===o,<span class="built_in">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">o.getThis();<span class="comment">//true "this object"</span></span><br></pre></td></tr></tbody></table></figure><p>此时getThis函数是o调用的，所以函数内部的this指向o</p><p>但是</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"this object"</span>,</span><br><span class="line">    <span class="string">"getThis"</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>===o,<span class="built_in">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"window name"</span>;</span><br><span class="line"><span class="keyword">var</span> fn = o.getThis;</span><br><span class="line">fn();<span class="comment">//false "window name"</span></span><br></pre></td></tr></tbody></table></figure><p>为什么此时就变成了false了呢。因为fn获得是一个函数。现在调用fn()则变成了window.fn()，此时的this指向了window，调用函数的主体是window，this.name===window.name，变成了”window name”。</p><h2 id="5-this在箭头函数里的指向，this的作用是什么"><a href="#5-this在箭头函数里的指向，this的作用是什么" class="headerlink" title="5. this在箭头函数里的指向，this的作用是什么"></a>5. this在箭头函数里的指向，this的作用是什么</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window name"</span></span><br><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"this object"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>===o);</span><br><span class="line">        <span class="comment">//let that = this;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>===that,<span class="built_in">this</span>.name);</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">o.fn()<span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> foo = o.fn()</span><br><span class="line">foo()<span class="comment">//true "this object"</span></span><br><span class="line"><span class="comment">//此时o.fn()是箭头函数()=&gt;{}，this指向声明阶段的上下文，也就是o</span></span><br></pre></td></tr></tbody></table></figure><p>在普通函数中this的绑定是在执行位置绑定</p><p>在箭头函数里面的this在声明阶段硬绑定到上下文中。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window name"</span></span><br><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"this object"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>===o);</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>===that,<span class="built_in">this</span>.name);</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">o.fn()();<span class="comment">//true false "window name"</span></span><br><span class="line"><span class="comment">//此时o.fn()是function,执行时this指向window</span></span><br></pre></td></tr></tbody></table></figure><ul><li>作用</li></ul><p>绑定事件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> leftBtn = <span class="built_in">document</span>.querySelector(<span class="string">".left"</span>);</span><br><span class="line">leftBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">this</span>.style.backgroundColor = <span class="string">"red"</span>;<span class="comment">//点击事件触发的主体是leftBtn</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>循环绑定</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lilist = <span class="built_in">document</span>.querySelectorAll(<span class="string">".list li"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; lilist.length;i++){</span><br><span class="line">    lilist[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">this</span>.innerHTML = <span class="string">"666"</span>;    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-函数的name与length属性"><a href="#6-函数的name与length属性" class="headerlink" title="6. 函数的name与length属性"></a>6. 函数的name与length属性</h2><p>函数得name是函数名下面的属性，是函数的唯一标识符</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.name)</span><br><span class="line">}</span><br><span class="line">foo();<span class="comment">//"name"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.name)</span><br><span class="line">}</span><br><span class="line">a();<span class="comment">//"a"</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="function">() =&gt;</span>{}</span><br><span class="line"><span class="built_in">console</span>.log(b.name);<span class="comment">//</span></span><br></pre></td></tr></tbody></table></figure><p>函数的name属性就是函数名</p><h2 id="7-arguments的length"><a href="#7-arguments的length" class="headerlink" title="7. arguments的length"></a>7. arguments的length</h2><p>函数的arguments的length属性是指参数类数组中参数的长度</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length)</span><br><span class="line">}</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//5</span></span><br></pre></td></tr></tbody></table></figure><h2 id="8-this的指向修改call-apply与bind的意义"><a href="#8-this的指向修改call-apply与bind的意义" class="headerlink" title="8. this的指向修改call apply与bind的意义"></a>8. this的指向修改call apply与bind的意义</h2><p> 函数得this得指向是可以修改得。我们需要用到某些特殊得原型得方法得时候会用到call，apply还有bind强行修改。</p><ul><li>call/apply</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'window name'</span>;</span><br><span class="line"><span class="keyword">var</span> o1 = {</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"object name"</span>,</span><br><span class="line">    getThis:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> o2 = {</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"another name"</span>,</span><br><span class="line">}</span><br><span class="line">o1.getThis();<span class="comment">//"object name"</span></span><br><span class="line"><span class="keyword">var</span> fn = o1.getThis;</span><br><span class="line">fn();<span class="comment">//"window name"</span></span><br><span class="line">fn.call(o2);<span class="comment">//"another name"</span></span><br><span class="line">fn.apply(o2);<span class="comment">//"another name"</span></span><br><span class="line">fn.call(o1);<span class="comment">//"object name"</span></span><br></pre></td></tr></tbody></table></figure><p>此时call/aplly都会使函数执行，相当于强行修改了调用函数得主体对象，在你想要得对象上借用了别的方法。方法得一处书写，到处使用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    <span class="string">"0"</span>:<span class="string">"123"</span>,</span><br><span class="line">    <span class="string">"1"</span>:<span class="string">"456"</span>,</span><br><span class="line">    <span class="string">"2"</span>:<span class="string">"789"</span>,</span><br><span class="line">    <span class="string">"length"</span>:<span class="number">3</span>,</span><br><span class="line">}</span><br><span class="line">o.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">});<span class="comment">//此处会报错，因为对象o没有forEach方法，这是数组得方法</span></span><br><span class="line"><span class="comment">//于是</span></span><br><span class="line">[].forEach.call(o,<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">})<span class="comment">//打印"123" "456" "789"</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEvery = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>{<span class="comment">//不完全方法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="built_in">this</span>.length;i++){</span><br><span class="line">        cb(<span class="built_in">this</span>[i]);</span><br><span class="line">    }</span><br><span class="line">}<span class="comment">//自己定义了一个方法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEvery(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">})<span class="comment">//1 2 3 4</span></span><br><span class="line">[].forEvery.call(o,<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">})<span class="comment">//"123" "456" "789"</span></span><br></pre></td></tr></tbody></table></figure><p>call，apply得唯一区别</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn.call(<span class="built_in">this</span>,x1,x2,x3,x4);<span class="comment">//函数原本参数是一个一个传进去得</span></span><br><span class="line">fn.apply(<span class="built_in">this</span>,[x1,x2,x3,x4]);<span class="comment">//函数原本参数放到数组中传进去</span></span><br></pre></td></tr></tbody></table></figure><ul><li>bind</li></ul><p>bind方法同样也可以修改函数执行得主体对象，但是bind是硬绑定，是在执行得时候返回一个绑定完成之后得函数，可以再任意地方执行</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'window name'</span>;</span><br><span class="line"><span class="keyword">var</span> o1 = {</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"object name"</span>,</span><br><span class="line">    getThis:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> o2 = {</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"another name"</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> sayName = o1.getThis.bind(o2);<span class="comment">//返回一个绑定好得函数,啥都不返回</span></span><br><span class="line">sayName();<span class="comment">//"another name"</span></span><br><span class="line">sayName.call(o1);<span class="comment">//"another name"已经改不了了</span></span><br></pre></td></tr></tbody></table></figure><p>其实bind得内部实现是,用到了call,或者是apply</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind=<span class="function"><span class="keyword">function</span>(<span class="params">obj,...arg1</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...arg2</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.apply(obj,arg1.concat(arg2))</span><br><span class="line">    }</span><br><span class="line">}<span class="comment">//粗略版，返回一个函数，此函数执行返回原函数绑定到obj上得硬绑定，arg1，arg2是参数,不考虑原型链，错误, 兼容性等情况</span></span><br></pre></td></tr></tbody></table></figure><p>原型得问题在面向对象讲。call/apply/bind问题再深入讨论</p><h2 id="9-严格模式"><a href="#9-严格模式" class="headerlink" title="9.严格模式"></a>9.严格模式</h2><p>可以不是函数开头可以加一句”use strict”;让函数变成严格模式</p><ul><li>不允许用with。</li><li>所有变量必须声明，赋值给未声明的变量报错，而不是隐匿创建全局变量。</li><li>eval中的代码不能创建eval所在作用域下的变量、函数。而是为eval单独创建一个作用域，并在eval返回时丢弃。</li><li>函数中的特殊对象arguments是静态副本，而不像非严格模式那样，修改arguments或修改参数变量会相互影响。</li><li>删除configurable=false的属性时报错，而不是忽略。</li><li>对象字面量重复属性名报错。</li><li>禁止八进制字面量，如010（八进制的8）。</li><li>严格模式下eval、arguments变为关键字，不能用作变量名。</li><li>一般函数调用时（不是对象的方法调用，也不使用apply/call/bind等修改this）this指向null，而不是全局变量。</li><li>试图修改不可写属性（writable=false），在不可扩展的对象上添加属性时报TypeError，而不是忽略。</li><li>arguments.caller,arguements.callee被禁用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JavaScript函数高级" scheme="https://popcorn-senior.github.io/tags/JavaScript%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
</feed>
